Step 1:

Build java jar file.

Step 2:

build docker image


Step 3:

Push to ecr
aws ecr get-login-password --region eu-north-1 | docker login --username AWS --password-stdin 339712821622.dkr.ecr.eu-north-1.amazonaws.com
docker build -t eks-poc-1 .
docker tag eks-poc-1:latest 339712821622.dkr.ecr.eu-north-1.amazonaws.com/eks-poc-1:latest
docker push 339712821622.dkr.ecr.eu-north-1.amazonaws.com/eks-poc-1:latest

mysql:1.1
docker build -t mysql:1.1 .
docker tag mysql:1.1 339712821622.dkr.ecr.eu-north-1.amazonaws.com/mysql:1.1
docker push 339712821622.dkr.ecr.eu-north-1.amazonaws.com/mysql:1.1


loginwebapp:1.2
docker build -t loginwebapp:1.2 .
docker tag loginwebapp:1.2 339712821622.dkr.ecr.eu-north-1.amazonaws.com/loginwebapp:1.2
docker push 339712821622.dkr.ecr.eu-north-1.amazonaws.com/loginwebapp:1.2

https://github.com/ranjit4github/k8s-project-deployment


Step 4:

Create yaml file to deploy on aws eks cluster

Step 5:

Accessing the application:

Deploy the YAML files: Apply the deployment and service YAML files with kubectl apply -f deployment.yaml -f service.yaml.

Get the LoadBalancer details: Once the service is running, use
 kubectl get service eks-poc-service to retrieve the LoadBalancer details (e.g., ingress: <public_IP> or <DNS_name> depending on your cloud provider).

Access from Chrome: Open Google Chrome and navigate to the public IP address or DNS name provided by the LoadBalancer.
 This will route traffic to your application running in the Kubernetes cluster.